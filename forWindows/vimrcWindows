set nocompatible            " be iMproved, required
filetype off                " required, so vundle will be loaded properly

let mapleader=" "
let localleader = ","

set rtp+=~/vimDebugPlugin
set rtp+=~/.vim
let g:coc_global_extensions = [
      \ 'coc-ultisnips',
      \ 'coc-json',
      \ 'coc-prettier',
      \ 'coc-css',
      \ 'coc-highlight',
      \ 'coc-eslint',
      \ 'coc-marketplace',
      \ 'coc-snippets',
      \ 'coc-calc',
      \ 'coc-tslint',
      \ 'coc-todolist',
      \ 'coc-tabnine',
      \ 'coc-spell-checker',
      \ 'coc-browser',
      \ 'coc-dictionary',
      \ 'coc-bookmark',
      \ 'coc-clangd',
      \ 'coc-vimlsp',
      \ 'coc-template',
      \ 'coc-python',
      \ 'coc-markdownlint',
      \ 'coc-highlight',
      \'coc-tag',
      \ 'coc-word',
      \'coc-syntax',
      \'coc-explorer',
      \ 'coc-lists',
      \ 'coc-cmake'
      \]

      "\ 'coc-html',
      "\ 'coc-explorer',
      "\ 'coc-tsserver',
      "\ 'coc-powershell',
      "\ 'coc-cspell-dicts',
      "\ 'coc-yaml',
      "\ 'coc-angular',

call plug#begin('~/vimDebugPlugin')
"""""""""""""""""""""""""""""""""""""
" vim-lsp can replace coc. to test !
"Plug 'prabirshrestha/vim-lsp'
"Plug 'mattn/vim-lsp-settings'
"asyncomplete.vim
"Plug 'prabirshrestha/asyncomplete.vim'
"Plug 'prabirshrestha/asyncomplete-lsp.vim'
"deoplete.nvim
"Plug 'Shougo/deoplete.nvim'
"Plug 'lighttiger2505/deoplete-vim-lsp'
"
"
""nvim lsp builtin to look later in a release built can be interesting
":Plug 'neovim/nvim-lspconfig'
"""""""""""""""""""""""""""""""""""""""""""""""""
" 
"
"
"Plug 'apalmer1377/factorus' "factoring c++ code. replaced by clangd 11 
Plug 'sheerun/vim-polyglot'
"Plug 'PProvost/vim-ps1' "display mark and allow new shortcut
Plug 'kshenoy/vim-signature' "display mark and allow new shortcut
"Plug 'vhdirk/vim-cmake' "Cmake command available for launch cmake --build build
"Plug 'cdelledonne/vim-cmake' "only linux
"Plug 'ilyachur/cmake4vim' 'not async so unusable
"Plug 'vhdirk/vim-cmake'
"Plug 'jalcine/cmake.vim' 'don't work
"https://github.com/Shatur95/vim-cmake-projects
"
"https://github.com/regen100/cmake-language-server
"""""""""""""""""""""""""""""""""""
" color schema
"""""""""""""""""""""""""""""""""""
"Plug 'altercation/vim-colors-solarized' " solarized color for vim
Plug 'lifepillar/vim-solarized8'
Plug 'morhetz/gruvbox'
Plug 'romainl/flattened'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'ayu-theme/ayu-vim'
"set termguicolors     " enable true colors support
"let ayucolor="light"  " for light version of theme
"let ayucolor="mirage" " for mirage version of theme
"let ayucolor="dark"   " for dark version of theme
"colorscheme ayu
Plug 'arcticicestudio/nord-vim'
Plug 'rakr/vim-one'
Plug 'mhartington/oceanic-next'
""""""""""""""""""""""""""""""""""

"Plug 'Yggdroot/indentLine' " bug for json file were '' disparait
Plug 'nathanaelkane/vim-indent-guides'
Plug 'heavenshell/vim-pydocstring', { 'do': 'make install' }
Plug 'lifepillar/vim-cheat40'
Plug 'jackguo380/vim-lsp-cxx-highlight' "syntaxe highlight C++ for coc.nvim
"Plug 'MattesGroeger/vim-bookmarks'
"Plug 'tpope/vim-surround' " surround word under cursor with flag (\"\" or ()...)
Plug 'luochen1990/rainbow' " color pair of bracket for better lisibility
"Plug 'jiangmiao/auto-pairs' " ef

Plug 'mhinz/vim-startify' "show last recent opened file to vim startup
"Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
"Plug 'sbdchd/neoformat'
"Plug 'grailbio/bazel-compilation-database'
Plug 'easymotion/vim-easymotion'
Plug 'jreybert/vimagit'
Plug 'liuchengxu/vim-which-key'
"Plug 'liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!'] } #create
"a bug on map name key
Plug 'neoclide/jsonc.vim'
if has('nvim')
  "Plug 'TheZoq2/neovim-auto-autoread'
  "Plug 'huawenyu/new.vim'
  "Plug 'huawenyu/new-gdb.vim' "don t work on windows os
  "Plug 'sakhnik/nvim-gdb', { 'branch': 'legacy' }
  "Plug 'sakhnik/nvim-gdb', { 'do': ':!./install.sh \| UpdateRemotePlugins' }
  ""suspected to bug snippet "
  Plug 'ncm2/float-preview.nvim'
else
  Plug 'pakutoma/toggle-terminal'
endif
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
Plug 'conornewton/vim-latex-preview' "latex live preview"
Plug 'will133/vim-dirdiff' "diff between directory
Plug 'rstacruz/vim-closer'
Plug 'tpope/vim-fugitive' "fugitive =  git wrapper
Plug 'lambdalisue/gina.vim'
Plug 'gregsexton/gitv', {'on': ['Gitv']} "top git log
Plug 'majutsushi/tagbar' "display a menu with tag in file
"Plug 'vim-scripts/Gundo' "Gundo.vim is Vim plugin to visualize your Vim undo tree
Plug 'mbbill/undotree' "show vim history
Plug 'Konfekt/FastFold' "empeche les lag avec syntaxe fold method
Plug 'Shougo/echodoc' "Displays function signatures from completions in the command line
Plug 'Chiel92/vim-autoformat' "autoformat
"Plug 'Valloric/YouCompleteMe', { 'do': './install.py  --clangd-completer --clang-completer --clang-tidy --js-completer'  } " YouCompleteMe is a fast, as-you-type, fuzzy-search code completion engine for Vim. command ofr install : python install.py. alternative from omnicompletion + jedi-vim(for pyhton file)
"Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
Plug 'itchyny/lightline.vim'
Plug 'alvan/vim-closetag' "close html tag with key '>' or '>>'
"Plug 'ludovicchabant/vim-gutentags' "auto tag git project
"Plug 'tell-k/vim-autopep8' "allow  command autopep8 in vim for python file
"Plug 'sjl/splice.vim' "tool for resolve threeMerge conflict
"Plug 'sirver/ultisnips' "UltiSnips is the ultimate solution for snippets in Vim (coc_ultisnip used but documentation available here)
Plug 'scrooloose/nerdcommenter' "allow comment <leader>cc for comment
"Plug 'Raimondi/delimitMate' "close bracket
Plug 'rchicoli/vim-zoomwin' "zoom with ctl-w-o
Plug 'airblade/vim-gitgutter'
Plug 'vim-scripts/DoxygenToolkit.vim'
"Plug 'dpelle/vim-Grammalecte'
Plug 'mhinz/vim-grepper'
Plug 'vigoux/LanguageTool.nvim'
"Plug 'dpelle/vim-LanguageTool'
Plug 'rhysd/vim-grammarous'
Plug 'junegunn/vim-easy-align' "align text
Plug 'skywind3000/asyncrun.vim'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'puremourning/vimspector' "don't really work on windows os
"Plug 'mphe/grayout.vim'
"Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}
Plug 'neoclide/coc.nvim', {'branch': 'release'} "can replaceYCM (more modern)
"Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
"Plug 'MaskRay/ccls', {'do': 'yarn install --frozen-lockfile'}
"Plug 'wsdjeg/vim-todo' "dont work
"Note: You may need to execute these commands in the "Developer Command Prompt for VS"
"git clone https://github.com/llvm/llvm-project.git
"cd llvm-project

"cmake -Hllvm -BRelease -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -DLLVM_TARGETS_TO_BUILD=X86 -DLLVM_ENABLE_PROJECTS=clang
"ninja -C Release clangFormat clangFrontendTool clangIndex clangTooling clang

"# Download ccls
"cd ccls
"cmake -H. -BRelease -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_PREFIX_PATH="D:/llvm/Release;D:/llvm/Release/tools/clang;D:/llvm;D:/llvm/tools/clang"
"ninja -C Release
"Plug 'universal-ctags/ctags', {'do' : nmake -f mk_mvc.mak}
Plug 'universal-ctags/ctags'
Plug 'voldikss/vim-translator'
"fzf for buffer
"Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
"Plug 'junegunn/fzf.vim'
call plug#end()

"let g:nvim_config_root = stdpath('config')
""let path = expand('%:p:h')

let g:path = expand('<sfile>:p:h') . "/pluginConfig/"
let g:config_file_list = [ 
\'ALE.vim',
\'asyncrun.vim',
\'auto-pair.vim',
\'autoformat.vim',
\'coc-json.vim',
\'coc-snippet.vim',
\'coc-translator.vim',
\'coc.vim',
\'ctags.vim',
\'ctrlp.vim',
\'delimitmate.vim',
\'deoplete.vim',
\'easymotion.vim',
\'float_previex.vim',
\'fugitive.vim',
\'gina.vim',
\'grammalect.vim',
\'grammarous.vim',
\'gundo.vim',
\'gutentag.vim',
\'indent-guide.vim',
\'language_tool.vim',
\'lightline.vim',
\'markdownPreview.vim',
\'neovim-lsp.vim',
\'nerdtree.vim',
\'netrw.vim',
\'personalFunction.vim',
\'rainbow.vim',
\'slice.vim',
\'supertab.vim',
\'tagbar.vim',
\'termdebug.vim',
\'undotree.vim',
\'vdebug.vim',
\'vim-instant-markdown.vim',
\'vim-lsp.vim',
\'vim-translator.vim',
\'vimBasic.vim',
\'vimspector.vim',
\'which_key.vim',
\'YouCompleteMe.vim',
\'mapping.vim',
                  \]
for f in g:config_file_list
    execute 'source ' . g:path . '/' . f
endfor


"au FileType cmake RainbowToggleOff "bug syntax higlighting




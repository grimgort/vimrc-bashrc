set nocompatible            " be iMproved, required
filetype off                " required, so vundle will be loaded properly

"let g:mapleader = ","
let mapleader=" "

set rtp+=~/vimDebugPlugin
set rtp+=~/.vim
let g:coc_global_extensions = [
      \ 'coc-ultisnips',
      \ 'coc-json',
      \ 'coc-prettier',
      \ 'coc-tsserver',
      \ 'coc-html',
      \ 'coc-css',
      \ 'coc-yaml',
      \ 'coc-highlight',
      \ 'coc-angular',
      \ 'coc-eslint',
      \ 'coc-marketplace',
      \ 'coc-snippets',
      \ 'coc-calc',
      \ 'coc-explorer',
      \ 'coc-tslint',
      \ 'coc-todolist',
      \ 'coc-tabnine',
      \ 'coc-cspell-dicts',
      \ 'coc-spell-checker',
      \ 'coc-browser',
      \ 'coc-dictionary',
      \ 'coc-bookmark',
      \ 'coc-cmake'
      \]

call plug#begin('~/vimDebugPlugin')
Plug 'PProvost/vim-ps1' "display mark and allow new shortcut
Plug 'kshenoy/vim-signature' "display mark and allow new shortcut
"Plug 'vhdirk/vim-cmake' "Cmake command available for launch cmake --build build
"""""""""""""""""""""""""""""""""""
" color schema
"""""""""""""""""""""""""""""""""""
"Plug 'altercation/vim-colors-solarized' " solarized color for vim
Plug 'lifepillar/vim-solarized8'
Plug 'morhetz/gruvbox'
Plug 'romainl/flattened'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'ayu-theme/ayu-vim'
"set termguicolors     " enable true colors support
"let ayucolor="light"  " for light version of theme
"let ayucolor="mirage" " for mirage version of theme
"let ayucolor="dark"   " for dark version of theme
"colorscheme ayu
Plug 'arcticicestudio/nord-vim'
Plug 'rakr/vim-one'
Plug 'mhartington/oceanic-next'
""""""""""""""""""""""""""""""""""

"Plug 'Yggdroot/indentLine' " bug for json file were '' disparait
Plug 'nathanaelkane/vim-indent-guides'
Plug 'heavenshell/vim-pydocstring', { 'do': 'make install' }
Plug 'lifepillar/vim-cheat40'
Plug 'jackguo380/vim-lsp-cxx-highlight' "syntaxe highlight C++ for coc.nvim
"Plug 'MattesGroeger/vim-bookmarks'
"Plug 'tpope/vim-surround' " surround word under cursor with flag (\"\" or ()...)
Plug 'luochen1990/rainbow' " color pair of bracket for better lisibility
Plug 'jiangmiao/auto-pairs' " ef

Plug 'mhinz/vim-startify' "show last recent opened file to vim startup
"Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
"Plug 'sbdchd/neoformat'
"Plug 'grailbio/bazel-compilation-database'
Plug 'easymotion/vim-easymotion'
Plug 'jreybert/vimagit'
Plug 'liuchengxu/vim-which-key'
Plug 'liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!'] }
Plug 'neoclide/jsonc.vim'
if has('nvim')
  Plug 'TheZoq2/neovim-auto-autoread.git'
  "Plug 'huawenyu/new.vim'
  "Plug 'huawenyu/new-gdb.vim' "don t work on windows os
  "Plug 'sakhnik/nvim-gdb', { 'branch': 'legacy' }
  "Plug 'sakhnik/nvim-gdb', { 'do': ':!./install.sh \| UpdateRemotePlugins' }
  ""suspected to bug snippet "
  "Plug 'ncm2/float-preview.nvim'
else
  Plug 'pakutoma/toggle-terminal'
endif
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
Plug 'will133/vim-dirdiff' "diff between directory
Plug 'rstacruz/vim-closer'
Plug 'tpope/vim-fugitive' "fugitive =  git wrapper
Plug 'lambdalisue/gina.vim'
Plug 'gregsexton/gitv', {'on': ['Gitv']} "top git log
Plug 'majutsushi/tagbar' "display a menu with tag in file
"Plug 'vim-scripts/Gundo' "Gundo.vim is Vim plugin to visualize your Vim undo tree
Plug 'mbbill/undotree' "show vim history
Plug 'Konfekt/FastFold' "empeche les lag avec syntaxe fold method
Plug 'Shougo/echodoc' "Displays function signatures from completions in the command line
Plug 'Chiel92/vim-autoformat' "autoformat
"Plug 'Valloric/YouCompleteMe', { 'do': './install.py  --clangd-completer --clang-completer --clang-tidy --js-completer'  } " YouCompleteMe is a fast, as-you-type, fuzzy-search code completion engine for Vim. command ofr install : python install.py. alternative from omnicompletion + jedi-vim(for pyhton file)
"Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
Plug 'itchyny/lightline.vim'
Plug 'alvan/vim-closetag' "close html tag with key '>' or '>>'
"Plug 'ludovicchabant/vim-gutentags' "auto tag git project
"Plug 'tell-k/vim-autopep8' "allow  command autopep8 in vim for python file
"Plug 'sjl/splice.vim' "tool for resolve threeMerge conflict
"Plug 'sirver/ultisnips' "UltiSnips is the ultimate solution for snippets in Vim (coc_ultisnip used but documentation available here)
Plug 'scrooloose/nerdcommenter' "allow comment <leader>cc for comment
"Plug 'Raimondi/delimitMate' "close bracket
Plug 'rchicoli/vim-zoomwin' "zoom with ctl-w-o
Plug 'airblade/vim-gitgutter'
Plug 'vim-scripts/DoxygenToolkit.vim'
"Plug 'dpelle/vim-Grammalecte'
Plug 'mhinz/vim-grepper'
Plug 'vigoux/LanguageTool.nvim'
"Plug 'dpelle/vim-LanguageTool'
Plug 'rhysd/vim-grammarous'
Plug 'junegunn/vim-easy-align' "align text
Plug 'skywind3000/asyncrun.vim'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'puremourning/vimspector'
"Plug 'mphe/grayout.vim'
"Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}
Plug 'neoclide/coc.nvim', {'branch': 'release'} "can replaceYCM (more modern)
"Plug 'MaskRay/ccls', {'do': 'yarn install --frozen-lockfile'}
"Note: You may need to execute these commands in the "Developer Command Prompt for VS"
"git clone https://github.com/llvm/llvm-project.git
"cd llvm-project

"cmake -Hllvm -BRelease -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -DLLVM_TARGETS_TO_BUILD=X86 -DLLVM_ENABLE_PROJECTS=clang
"ninja -C Release clangFormat clangFrontendTool clangIndex clangTooling clang

"# Download ccls
"cd ccls
"cmake -H. -BRelease -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_PREFIX_PATH="D:/llvm/Release;D:/llvm/Release/tools/clang;D:/llvm;D:/llvm/tools/clang"
"ninja -C Release
"Plug 'universal-ctags/ctags', {'do' : nmake -f mk_mvc.mak}
Plug 'universal-ctags/ctags'
Plug 'voldikss/vim-translator'
call plug#end()
""""""""""""""""""""""""""""""""""""
" disable to print FX on insert mode
""""""""""""""""""""""""""""""""""""
map! <F5> <Nop>
map! <F2> <Nop>
map! <F3> <Nop>
map! <F12> <Nop>
map! <F11> <Nop>
map! <F10> <Nop>
map! <F9> <Nop>
map! <F8> <Nop>
map! <F7> <Nop>
map! <F6> <Nop>
map! <F4> <Nop>
syntax on                   " syntax highlighting
filetype on                 " try to detect filetypes
filetype plugin indent on   " enable loading indent file for filetype
if has('nvim')
else
  packadd termdebug " add gdb to vim
  noremap <leader>,r :Run <cr>
  "run the program with args or the previous arguments
  noremap <leader>,a :Arguments<cr>
  "{args}  set arguments for the next :Run
  noremap <leader>,b :Break<cr>
  "set a breakpoint at the cursor position
  "Break {position} "    set a breakpoint at the specified position
  noremap <leader>,c :Clear <cr>
  " delete the breakpoint at the cursor position
  noremap <leader>,s :Step <cr>
  "  execute the gdb step command
  noremap <leader>,o :Over <cr>
  "execute the gdb next command (`:Next` is a Vim command)
  noremap <leader>,f :Finish <cr>
  "execute the gdb finish command
  noremap <leader>,c :Continue <cr>
  "execute the gdb ontinue command
  noremap <leader>,w :Stop <cr>
  "interrupt the program
  noremap <leader>,e :Evaluate<cr>
  vnoremap <leader>,e :'<,'>Evaluate<cr>

  "debug json matisse
  "
  "com! CmakeFormat silent! call CmakeFormat()<cr>
  function! Toto()
    "silent! :Run D:/ftarroux/Documents/FRED/baseGit/Otamat/BaseDeTest/aero_5_1/T350-VE-NA-5-1_1.scm D:/ftarroux/Documents/FRED/baseGit/Otamat/BaseDeTest/aero_5_1/matisse.cfg
    "silent! :Run D:/ftarroux/Documents/FRED/baseGit/Otamat/BaseDeTest/aero_5_10/T350-NR-NA-5-10_1.scm D:/ftarroux/Documents/FRED/baseGit/Otamat/BaseDeTest/aero_5_1/matisse.cfg
    :Termdebug D:/ftarroux/Documents/FRED/baseGit/BoulotCorona/JsonMatisse/matisseReaderCjson/matisse_fred2.exe
    silent! :Run D:/ftarroux/Documents/FRED/baseGit/Otamat/BaseDeTest/aero_5_13/T350-VE-NA-5-13_1.scm D:/ftarroux/Documents/FRED/baseGit/Otamat/BaseDeTest/aero_5_1/matisse.cfg
    "silent! :CocCommand explorer --quit
  endfunction
  silent com! RunMatisse call Toto()
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" automatically leave insert mode after 'updatetime' milliseconds of inaction
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"augroup Foo
"au CursorHoldI * stopinsert"
"" set 'updatetime' to 15 seconds when in insert mode
"au InsertEnter * let updaterestore=&updatetime | set updatetime=15000
"au InsertLeave * let &updatetime=updaterestore
"augroup END
"autocmd! Foo

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" return on normal mode when vim lost focus
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"autocmd FocusLost * call feedkeys("\<esc>")

"""""""""""""""""
" set powershell by terminal default
"""""""""""""""""
"set shell=powershell  "create a bug on plug install !!! be careful
"set shellcmdflag=-command
"
"set shell=powershell.exe
"set shellcmdflag=-NoProfile\ -NoLogo\ -NonInteractive\ -Command
"set shellpipe=|
"set shellredir=>
"set shell=powershell.exe\ -NoLogo\ -NoProfile\ -NonInteractive\ -ExecutionPolicy\ RemoteSigned
" if shellcmdflag starts with '-' then tempname() uses forward slashes, see
" https://groups.google.com/forum/#!topic/vim_dev/vTR05EZyfE0
"set shellcmdflag=\ -Command
"set shellquote=
"set shellxquote=(
"let &shellpipe='| Out-File -Encoding UTF8 %s'
"let &shellredir='| Out-File -Encoding UTF8 %s'
"set noshellslash
"""""""""""""""""""
" asyncrun
""""""""""""""""""""
let g:asyncrun_wrapper = 'powershell -command'
"let g:asyncrun_wrapper = 'pwsh -command'

"""""""""""""""""""
" a.vim
"""""""""""""""""""
"unmap leader is who provoque a bug

""""""""""""""""""""
" markdownPreview.vim
"""""""""""""""""""
" set to 1, nvim will open the preview window after entering the markdown buffer
" default: 0
let g:mkdp_auto_start = 0

"-----------------
"" Plugin GRAMMALECT
"-----------------
"let g:grammalecte_cli_py='D:/ftarroux/Logiciel/Grammalecte-fr-v1.5.0/grammalecte-cli.py'
"let g:grammalecte_cli_py='D:\ftarroux\Logiciel\Grammalecte-fr-v1.5.0\build\scripts-3.7\grammalecte-cli.py'
"-----------------
"" Plugin DEOPLETE
"-----------------
"let g:deoplete#enable_at_startup = 1
"-----------------
"" Plugin Curtline
"-----------------
noremap <leader>gh :call CurtineIncSw()<CR>
"
"-----------------
"" Plugin Autoformat
"-----------------
"au BufWrite * :Autoformat "autoformat on save
"noremap <F12> :Autoformat<CR>
"autocmd FileType f,tex let b:autoformat_autoindent=0
"-----------------
"" Plugin delimitMate
"-----------------
let loaded_delimitMate = 1

"-----------------
"" Plugin languageTool
"-----------------
"let g:grammarous#languagetool_cmd = '~\scoop/apps/languagetool/current/languagetool-commandline.jar'
":let g:languagetool_jar='~\scoop/apps/languagetool/current/languagetool-commandline.jar'
:let g:languagetool_server_jar='~/scoop/apps/languagetool/current/languagetool-server.jar'
"____________________
"vdebug
"---------------------
"let g:vdebug_keymap = {
      "\    "run" : "<Leader><F5>",
      "\    "run_to_cursor" : "<Leader><F9>",
      "\    "step_over" : "<Leader><F2>",
      "\    "step_into" : "<Leader><F3>",
      "\    "step_out" : "<Leader><F4>",
      "\    "close" : "<Leader><F6>",
      "\    "detach" : "<Leader><F7>",
      "\    "set_breakpoint" : "<Leader><F10>",
      "\    "get_context" : "<Leader><F11>",
      "\    "eval_under_cursor" : "<Leader><F12>",
      "\    "eval_visual" : "<Leader>e",
"\}
"
"-----------------
"" toggle terminal
"-----------------
if has('nvim')
  let g:term_buf = 0
  let g:term_win = 0
  function! Term_toggle(height)
    if win_gotoid(g:term_win)
      hide
    else
      botright new
      "vertical bo split new
      "vertical bo 80vsplit new
      "belowright new
      "exec "resize " . a:height
      try
        exec "buffer " . g:term_buf
      catch
        call termopen("powershell", {"detach": 0})
        let g:term_buf = bufnr("")
      endtry
      startinsert!
      let g:term_win = win_getid()
    endif
  endfunction

  nnoremap <leader>à  :call Term_toggle(15)<cr>
  tnoremap <leader>à  <C-\><C-n>:call Term_toggle(15)<cr>
  nnoremap à  :call Term_toggle(15)<cr>
  tnoremap à  <C-\><C-n>:call Term_toggle(15)<cr>
  tmap <Esc> <C-\><C-n>
  tmap <C-w> <C-\><C-n><C-w>
  au BufEnter * if &buftype == 'terminal' | :startinsert | endif

else
  " map <C-@> to toggle
  tnoremap <silent>  <leader>à <C-w>:ToggleTerminal<CR>
  nnoremap <silent>  <leader>à :ToggleTerminal<CR>

  tnoremap <silent>  à <C-w>:ToggleTerminal<CR>
  nnoremap <silent>  à :ToggleTerminal<CR>

  " set your favorite shell
  "let g:toggle_terminal#command = 'pwsh'
  let g:toggle_terminal#command = 'powershell'

  " set terminal window position
  " (see possible options at :help vertical)
  let g:toggle_terminal#position = 'topleft'
endif
"
"-----------------
"" Plugin gutentag
"-----------------
"let g:gutentags_exclude_filetypes = "cxx,hxx"

"-----------------
"" Plugin ALE
"-----------------
"let g:ale_completion_enabled = 1
" let g:ale_linters = {
" \   'rust': ['rls', 'cargo']
" \}
" let g:ale_linters={'python': ['pylint', 'pydocstyle', 'mypy']}

"-----------------
"" Plugin fugitive
"-----------------
autocmd BufReadPost fugitive://* set bufhidden=delete
"autocmd QuickFixCmdPost *grep* cwindow "alow to choose file in quickFiXList whit :Ggrep command
"nnoremap <silent> <leader>a :Gstatus<cr>

" let g:EasyGrepOpenWindowOnMatch=0

""""""""""""""""""""""
" Configure ctags for vim
""""""""""""""""""""""
"Auto chearsh the first tags file from the current file
set tags=./tags;,tags;



"""""""""""""""""""""""""""""""""""
" Splice setting
"""""""""""""""""""""""""""""""""""
" let g:splice_prefix = "<leader>t "

"""""""""""""""""""""""""""""""""""
" lightline setting
"""""""""""""""""""""""""""""""""""
let g:lightline = {
      \   'active': {
      \     'left':[ [ 'mode', 'paste' ],
      \              [ 'gitbranch', 'cocstatus','readonly', 'filename', 'modified' ]
      \     ]
      \   },
      \   'component': {
      \     'lineinfo': ' %3l:%-2v',
      \   },
      \   'component_function': {
      \     'gitbranch': 'fugitive#head',
      \   }
      \ }
let g:lightline.separator = {
      \   'left': '|', 'right': '|'
      \}
let g:lightline.subseparator = {
      \   'left': '|', 'right': '|'
      \}

let g:lightline.tabline = {
      \   'left': [ ['tabs'] ],
      \   'right': [ ['close'] ]
      \ }


let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'cocstatus': 'coc#status'
      \ },
      \ }

" Use auocmd to force lightline update.
autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()
set showtabline=2  " Show tabline
set guioptions-=e  " Don't use GUI tabline
"""""""""""""""""""
"markdown
"""""""""""""""""""
"let g:instant_markdown_slow = 1
"let g:instant_markdown_autostart = 0
"let g:instant_markdown_open_to_the_world = 1
"let g:instant_markdown_allow_unsafe_content = 1
"let g:instant_markdown_allow_external_content = 0
"let g:instant_markdown_mathjax = 1
"let g:instant_markdown_logfile = '/tmp/instant_markdown.log'
"let g:instant_markdown_autoscroll = 0
"let g:instant_markdown_port = 8888
"let g:instant_markdown_python = 1
"""""""""""""""""""
"Rip-rip clang-completion
"""""""""""""""""""

"let g:clang_library_path='/usr/bin/clang'

"""""""""""""""""""
"clang-completion
"""""""""""""""""""
"let g:clang_format_auto = 1
"let g:clang_check_syntax_auto = 1
"let g:clang_verbose_pmenu = 1

"""""""""""""""""""
"YouCompleteMe
"""""""""""""""""""
"disable arrow key and use tab for selection
let g:ycm_key_list_select_completion = ['<TAB>']
let g:ycm_key_list_previous_completion = ['<S-TAB>']
let g:ycm_key_list_stop_completion = ['<C-y>', '<UP>', '<DOWN>']
let g:ycm_global_ycm_extra_conf =  '~/.vim/.ycm_extra_conf.py'
"let g:ycm_clangd_binary_path = exepath('clangd')
"let g:loaded_youcompleteme = 1
"-----------------
" let g:ycm_log_level = 'debug'
" let g:ycm_show_diagnostics_ui = 0
"let g:enable_ycm_at_startup = 0
""""""" Let clangd fully control code completion
let g:ycm_clangd_uses_ycmd_caching = 0
" Use installed clangd, not YCM-bundled clangd which doesn't get updates.
let g:ycm_clangd_binary_path = exepath("clangd")
let g:ycm_autoclose_preview_window_after_insertion = 1
noremap <leader>gr :YcmCompleter GoToReferences <CR>
nnoremap <leader>gg :YcmCompleter GoTo<CR>
nnoremap <leader>ge :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gt :YcmCompleter GetType<CR>
nnoremap <leader>gd :YcmCompleter GetDoc<CR>
nnoremap <leader>gf :YcmCompleter FixIt<CR>
nnoremap <F9> :YcmForceCompileAndDiagnostics<CR>
nnoremap <F12> :YcmCompleter Format<CR>
"nnoremap ² :YcmCompleter Format<CR>

"-----------------
"" Plugin solarized
"-----------------
syntax enable
"set background=dark
"set guifont=Monospace\ Bold\ 16
"colorscheme solarized
"colorscheme gruvbox
colorscheme solarized8
"set guifont=Source_Code_Pro:h13
set guifont=Consolas:h14:cANSI
set background=dark
":GuiFont! Consolas:h13:cANSI
"set guifont=*:h13
"set guifont=Source_Code_Pro:b:h13.5

" let g:ctrlp_by_filename = 1

"-----------------
"" Plugin Ctrlp
"-----------------
" let g:ctrlp_working_path_mode = 'rc'
" let g:ctrlp_by_filename = 1
" let g:ctrlp_max_files = 0
" map <leader>j :CtrlP<cr>
" map <c-b> :CtrlPMRUFiles<cr>
" map <c-b> :CtrlPBuffer<cr>

"""""""""""""""""""""
" Autoclose old buffer
"""""""""""""""""""""
" function CloseLast ()
" python <<EOF
" import vim
" N = 10
" listed_buffers = [b for b in vim.buffers if b.options['buflisted'] and not b.options['modified']]
" for i in range (0, len (listed_buffers) - N):
"   vim.command (':bd' + str (listed_buffers[i].number))
" EOF
" endfunction
" autocmd BufNew * call CloseLast()


"-----------------
"" Plugin NerdTree
"-----------------
let NERDChristmasTree=1
let NERDTreeWinSize=100
map <F2> :NERDTreeToggle<CR>
map <leader><F2> :NERDTreeFind<cr>

"
"
"-----------------
"" Plugin Tagbar
"-----------------
map <F3> :Tagbar<CR>
"let g:tagbar_ctags_bin = 'D:\ftarroux\Logiciel\ctags58\ctags.exe'
"let g:tagbar_ctags_bin = 'D:\LOGICELW7\ctags\ctags.exe'
"let g:tagbar_ctags_bin='ctags'
let g:tagbar_width=30
let g:tagbar_autofocus = 1
let g:tagbar_sort = 1

"-----------------
"" Plugin Gundo
"-----------------
"nnoremap <F4> :GundoToggle<CR>
" inoremap <F4> <c-o>:GundoToogle<cr>
"
"-----------------
"" Plugin UndotreeToggle
"-----------------
nnoremap <F4> :UndotreeToggle<CR>




""-----------------
""" Plugin supertab
""-----------------
"let g:SuperTabDefaultCompletionType = "<c-n>"

"
"-----------------
"" Configure gvim
"-----------------
if has('nvim')
else
  set guioptions-=T   " remove Tool bar
  set guioptions-=r   " remove Right bar
  set guioptions-=L   " remove Left bar
  set guioptions=c
  "you can copy with maj in insert modeuu
  "cause big lag on visual mode (set guioption+=a
  ":set guioptions+=a keymodel=startsel,stopsel

endif


"set guioptions-=T   " remove Tool bar
"set guioptions-=r   " remove Right bar
"set guioptions-=L   " remove Left bar
"set guioptions=c
" you can copy with maj in insert modeuu
" cause big lag on visual mode (set guioption+=a
":set guioptions+=a keymodel=startsel,stopsel
"use system clipboard
set clipboard=unnamed
"correct cursor bug for gnome terminal
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"
"Change cursor shape for GNU screen
if &term =~ "screen."
  let &t_ti.="\eP\e[1 q\e\\"
  let &t_SI.="\eP\e[5 q\e\\"
  let &t_EI.="\eP\e[1 q\e\\"
  let &t_te.="\eP\e[0 q\e\\"
else
  let &t_ti.="\<Esc>[1 q"
  let &t_SI.="\<Esc>[5 q"
  let &t_EI.="\<Esc>[1 q"
  let &t_te.="\<Esc>[0 q"
endif
"use classic editor shortcut
set mouse=a
set nu
map <C-a> GVgg
nnoremap <C-s> :w<cr>
inoremap <C-s> <c-o>:w<cr>
noremap <leader>h :history<cr>
nmap q: <Nop>
map <C-c> y
"imap <C-h> :%s/
nmap <C-h> :%s/
vmap <C-h> :s/
" vnoremap <C-h> "hy:%s/<C-r>h//gc<left><left><left>map <C-f> /
"Allow to shearch visula selection with *
vnoremap * y/\V<C-r>=escape(@",'/\')<CR><CR>
" Smart way to move between windows
map <C-S-Left> <C-W>h
map <C-S-Right> <C-W>l
map <C-S-Up> <C-W>k
map <C-S-Down> <C-W>j


"nnoremap <leader>v :e ~/.vimrc<cr>
"===============================
" Common Configuration for Vim
"================================
set encoding=utf-8      " utf-8 default  (others: big5, gbk, euc-jp)
set fencs=utf-8 " fileencodings: utf-8 default (others:gbk,ucs-bom)
set showcmd
set noshowmode          " not show `Insert,Normal` at bottom left
set wildmenu
set number              " Show line number
set cursorline          " Show underline in current cursor
"highlight CursorLine cterm=underline gui=underline
set cursorcolumn        " Show highlight in current column
" red line to 80 column
"highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"match OverLength /\%81v.\+/"
set wrap              " not wrap the long line
set colorcolumn=81      " Display the limit of text width.
"au BufRead,BufNewFile CMakeLists.txt setlocal textwidth=80"
"set textwidth=80        " Restrict text width.
set mouse=a             " Enable mouse to use (all mode)

set scrolloff=999         " Keep space from top and bottom. 999=center cursor vertically

set laststatus=2        " Alway show status bar at bottom
""" Tab setting
"set smartindent
set tabstop=2           " Tab key indents X spaces at a time
set softtabstop=2       " makes the spaces feel like real tabs
set shiftwidth=2        " X spaces indents
set expandtab           " Use spaces when the <Tab> key is pressed"
""" Searching and Pattens
set hlsearch        " Highlight search by default.
set smarttab        " handle tab more intelligently.
set incsearch       " search pattern when still typing
set backspace=indent,eol,start
"size of commande line
set cmdheight=1
"set autochdir "move repository to current buffer
""""""""""""""""""""""""""""""""""
"history and backup functionality"
""""""""""""""""""""""""""""""""""
"set nobackup
"set nowb
"set noswapfile
"set backup
"set wb
set swapfile
set shortmess+=A " disable warniong message with swapfile
if !isdirectory($HOME . "/.vim/.backup")
  call mkdir($HOME . "/.vim/.backup", "p", 0700)
endif
if !isdirectory($HOME . "/.vim/.undo")
  call mkdir($HOME . "/.vim/.undo", "p", 0700)
endif
if !isdirectory($HOME . "/.vim/.swp")
  call mkdir($HOME . "/.vim/.swp", "p", 0700)
endif

set undofile
set undodir=~/.vim/.undo//
set backupdir=~/.vim/.backup//
set directory=~/.vim/.swp//
set autoread

" No shearch sensitive case
set ignorecase
map <leader>cd :cd %:p:h<cr>:pwd<cr>


""""""""""""""""""""""
" enable fold methode
""""""""""""""""""""""
autocmd FileType jsonc set foldmethod=indent
set foldmethod=syntax
"set foldmethod=indent
set foldenable
set foldlevel=99
""enable fortran folding
let fortran_fold=1 " increase drastycely lag
let fortran_fold_conditionals=1
""fortran77 insert "&" on a new line column 6
let fortran_fixed_source=1
" let fortran_free_source=0
" let fortran_more_precise=1
let fortran_dialect="f77"
let fortran_have_tabs=1
" syn match fortranContinueMark display "^.\{5}\S"lc=5
"" unlet! fortran_free_source
"filetype plugin indent on
let fortran_do_enddo=1
"" add column to left for folder numero and git wrapper
set foldcolumn=2


""DOXYGEN syntaxe
let g:load_doxygen_syntax=1
autocmd FileType c,cpp,h set comments-=://
autocmd FileType c,cpp,h set comments+=:///<
autocmd FileType c,cpp,h set comments+=://
autocmd FileType c,cpp,h set comments+=://!<
"set comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,bO:///,O://,bO://!<
""""""""""""""""""""""""""""
" Add fr and en dictionary
""""""""""""""""""""""""""""
"setlocal spell spelllang=fr
map <silent> <F7> "<Esc>:silent setlocal spell! spelllang=en<CR>"
map <silent> <F6> "<Esc>:silent setlocal spell! spelllang=fr<CR>"
"hi clear SpellBad "disable udernlined error for spell"
"hi clear SpellCap "disable udernlined error for spell"
"hi clear SpellRare "disable udernlined error for spell"
"hi clear SpellLocal "disable udernlined error for spell"

"hi SpellBad   cterm=underline ctermfg=9  ctermbg=0 gui=undercurl
"hi SpellCap   cterm=underline ctermfg=14 ctermbg=0 gui=undercurl
"hi SpellRare  cterm=underline ctermfg=13 ctermbg=0 gui=undercurl
"hi SpellLocal cterm=underline ctermfg=11 ctermbg=0 gui=undercurl

set nospell "disable spell on vim start (push F6 or F7 for enable)"
set keymodel-=stopsel
set dictionary=D:\ftarroux\Documents\FRED\baseGit\vimrc-bashrc\liste.de.mots.francais.frgut.txt

""""""""""""""""""""""""""
" Personal remap
"""""""""""""""""""""""""
map <c-w>è :resize 10<cr>
"nnoremap <TAB> >>
"nnoremap <S-TAB> <<
"vnoremap <TAB> >gv
"vnoremap <S-TAB> <gv
nnoremap << >>
nnoremap >> <<
vnoremap << >gv
vnoremap >> <gv

"black hole register by default for d keyword
nnoremap dd "_dd
nnoremap d "_d
vnoremap d "_d
nnoremap D "_D
vnoremap D "_D

nnoremap x "_x
vnoremap x "_x

"c use register by default
nnoremap cc dd
nnoremap c d
vnoremap c d

"use black hole for suppr key map
noremap <Del> "_x

"grep word under cursor
nnoremap K :Ggrep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" Keymapping for grep word under cursor with interactive mode
"nnoremap <silent> K :exe 'CocList -I --input='.expand('<cword>').' grep'<CR>

"Clear highlight on pressing ESC
nnoremap <esc> :noh<return><esc>
"map terminal
tnoremap <C-k> <UP>
tnoremap <C-j> <DOWN>
tnoremap <C-h> <LEFT>
tnoremap <C-l> <RIGHT>
"show hidden char
autocmd FileType python set listchars=nbsp:☠,tab:▸␣
set list
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Function to allow to quit all secondary window.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"function! CloseAll()
"silent! :CocCommand explorer --quit
""silent! :CocCommand explorer --quit
"silent! pclose "close preview YCM
"silent! ccl "close result ggrep
"silent! helpclose "close help
"silent! call Close_gstatus() "close gstatu
"silent! call MyCloseDiff() "close git diff
"call DeleteBufferByExtension(".git") "close git windows
"call Close_gina() "don t work
"silent! :CocCommand explorer --quit
"CloseAll
"endfunction

"noremap  <silent>  q :call CloseAll()<cr>
"function! MyCloseFugitive()
"if &filetype('#') !~ '^fugitive:' && bufname('%') =~ '^fugitive:'

"pip install cmake_format to launch for this command
function! CmakeFormat()
  execute "!cmake-format.exe -i " bufname("%")
endfunction
nnoremap <silent> <F12>  :silent! call CmakeFormat()<cr>
com! CmakeFormat silent! call CmakeFormat()<cr>

:command! -complete=file -nargs=1 Rpdf :r !pdftotext -nopgbrk <q-args> - |fmt -csw78


function Close_all()
  let nodelete = 0
  let list_file_to_delete= []
  let list_file_to_keep = ['.vimrc','vimrcWindows' ]
  if expand('%:e') !=# ''
    let nodelete = 1
  endif
  for word in list_file_to_delete
    if expand('%:e') ==# word || expand('%:t') ==# word
      let  nodelete = 0
      break
    endif
  endfor

  for word in list_file_to_keep
    if expand('%:e') ==# word || expand('%:t') ==# word
      let  nodelete = 1
      break
    endif
  endfor

  if nodelete !=# 1
    execute "bw"
  endif
endfunction

function CloseWindo()
  let saved_winnr = winnr()
  pclose
  helpclose
  ccl
  "cache le terminal
  if has('nvim')
    if win_gotoid(g:term_win)
    hide
  endif
  endif
  windo call Close_all()
  exec saved_winnr . 'wincmd w'
endfunction

command! CloseAll call CloseWindo()
noremap <silent> q <esc>:CloseAll<cr><esc>
noremap <silent> ² <esc>:CloseAll<cr><esc>
vm <silent> ² <esc>:CloseAll<cr><esc>
im <silent> ² <esc>:CloseAll<cr><esc>
tmap <leader>²  <C-\><C-n>:CloseAll<cr><esc>

"""""""""""""""""""""""""""""""""""""
" coc-config-general
"""""""""""""""""""""""""""""""""""""

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=500

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
"set signcolumn=yes

"" Find symbol of current document.
nnoremap <silent> <space>no  :<C-u>CocList -A --tab outline<cr>
"" Search workspace symbols.
nnoremap <silent> <space>ns  :<C-u>CocList -I symbols<cr>
" Use `[g` and `]g` to navigate diagnostics
nmap <silent> <space>nh <Plug>(coc-diagnostic-prev)
nmap <silent> <space>nl <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> <space>nd <Plug>(coc-definition)
nmap <silent> <space>ny <Plug>(coc-type-definition)
nmap <silent> <space>ni <Plug>(coc-implementation)
nmap <silent> <space>nr <Plug>(coc-references)
nmap <silent> <space>nz <Plug>(coc-declaration)
nmap <silent> <space>np <Plug>(coc-codeaction)
vmap <silent> <space>np <Plug>(coc-codeaction-selected)
" Symbol renaming.
nmap <leader>na <Plug>(coc-rename)
nmap <leader>n* <Plug>(coc-refactor)
nmap <leader>nf  <Plug>(coc-format)
" Apply AutoFix to problem on the current line.
nmap <leader>nq  <Plug>(coc-fix-current)
" Use K to show documentation in preview window.
nnoremap <silent> <space>nk :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
"showSignatureHelp
autocmd User CocJumpPlaceholder call
      \ CocActionAsync('showSignatureHelp')
" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

"""""""""""""""""""""""""""""""""""""
" coc-prettier configuration
"""""""""""""""""""""""""""""""""""""
"nmap ² :CocCommand prettier.formatFile<cr>

"""""""""""""""""""""""""""""""""""""
" coc-snippets configuration
"""""""""""""""""""""""""""""""""""""
" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-l>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-h>'

" Use <C-j> for both expand and jump (make expand higher priority.)
"imap <C-j> <Plug>(coc-snippets-expand-jump)
" Use <C-l> for trigger snippet expand.

" Use <C-j> for select text for visual placeholder of snippet.
"nmap <C-z> coc#expandableOrJumpable()
"Map <tab> for trigger completion, completion confirm, snippet expand and jump
"like VSCode. >
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
"let g:coc_snippet_next = '<tab>'

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()
"for working with git gutter
if has('nvim')
  set signcolumn=yes:2
else
  set signcolumn=yes
endif


inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<Tab>"

" Use <C-l> for trigger snippet expand.
"imap <C-k> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
"vmap <C-j> <Plug>(coc-snippets-select)

"""""""""""""""""""""""""""""""""""""""""""""
"coc-completion
"""""""""""""""""""""""""""""""""""""""""""""
"Use <Tab> and <S-Tab> to navigate the completion list:

"inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
"inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
"inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<Tab>"
"inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<Tab>"
"Use <cr> to confirm completion

"inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"Note: you have to remap <cr> to make sure it confirm completion when pum is visible.

"Note: \<C-g>u is used to break undo level.

"To make <cr> select the first completion item and confirm the completion when no item has been selected:

"inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
"To make coc.nvim format your code on <cr>, use keymap:

"inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
"Close the preview window when completion is done. bug in buffer commandline
"with ctrl-F. to disable in this
"autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

"""""""""""""""""""""""""""""""""""""""""""
" coc-explorer
""""""""""""""""""""""""""""""""""""""""""""
:nmap <space>e :CocCommand explorer --toggle<CR>

"""""""""""""""""""""""""""""""""""""""""""
" coc-json
""""""""""""""""""""""""""""""""""""""""""""
"auto update json schema
":autocmd FileType json  call CocCommand json.retryResolveSchema




""""""""""""""""""""""""""""""""""""""""""""
" MAGIT
""""""""""""""""""""""""""""""""""""""""""""
nnoremap <leader>m :Magit<cr>


"""""""""""""""""""""""""""""""""""""""""""
" vim-which-key
""""""""""""""""""""""""""""""""""""""""""
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
"vnoremap <silent> <leader> :WhichKey '<Space>'<CR>
"set timeoutlen=1000
autocmd! FileType which_key
autocmd  FileType which_key set laststatus=0 noshowmode noruler
      \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
""""""""""""""""""""""""""""""""""""""""""""
" coc-todolist
""""""""""""""""""""""""""""""""""""""""""""
:nmap <space>ll :CocList -A --tab todolist<cr>
:nmap <space>lc :CocCommand todolist.create<cr>


"map <A-j> <Plug>(easymotion-j)
"map <A-k> <Plug>(easymotion-k)
map <leader><leader>l <Plug>(easymotion-w)
map <leader><leader>h <Plug>(easymotion-b)
""map <A-S-J> <Plug>(easymotion-J)
""map <A-S-K> <Plug>(easymotion-K)
map <leader><leader>L <Plug>(easymotion-W)
map <leader><leader>H <Plug>(easymotion-B)
map e <Plug>(easymotion-s)
"map <A-j> <Plug>(easymotion-j)
"map <A-k> <Plug>(easymotion-k)
"map <A-l> <Plug>(easymotion-w)
"map <A-h> <Plug>(easymotion-b)
"map <A-S-J> <Plug>(easymotion-J)
"map <A-S-K> <Plug>(easymotion-K)
"map <leader><leader>L <Plug>(easymotion-W)
"map <leader><leader>H <Plug>(easymotion-B)



"autocmd InsertChange * :CocCommand prettier.formatFile<cr>
"
"
""""""""""""""""""""""""""""""""""""""""""""""""
" coc-translator"
""""""""""""""""""""""""""""""""""""""""""""""""
" popup
"nmap <Leader>ntt <Plug>(coc-translator-p)
"vmap <Leader>ntt <Plug>(coc-translator-pv)
"" echo
"nmap <Leader>nte <Plug>(coc-translator-e)
"vmap <Leader>nte <Plug>(coc-translator-ev)
"" replace
"nmap <Leader>ntr <Plug>(coc-translator-r)
"vmap <Leader>ntr <Plug>(coc-translator-rv)


""""""""""""""""""""""""""""""""""""""""""""""""
" vim-translator"
""""""""""""""""""""""""""""""""""""""""""""""""
let g:translator_target_lang  = 'fr'
let g:translator_source_lang = 'en'
" Echo translation in the cmdline
nmap <silent> <Leader>te <Plug>Translate
vmap <silent> <Leader>te <Plug>TranslateV
" Display translation in a window
nmap <silent> <Leader>tt <Plug>TranslateW
vmap <silent> <Leader>tt <Plug>TranslateWV
" Replace the text with translation
nmap <silent> <Leader>tr <Plug>TranslateR
vmap <silent> <Leader>tr <Plug>TranslateRV
" Translate the text in clipboard
nmap <silent> <Leader>tx <Plug>TranslateX

" Echo translation in the cmdline
nmap <silent> <Leader>te! <Plug>Translate!
vmap <silent> <Leader>te! <Plug>TranslateV!
" Display translation in a window
nmap <silent> <Leader>tt! <Plug>TranslateW!
vmap <silent> <Leader>tt! <Plug>TranslateWV!
" Replace the text with translation
nmap <silent> <Leader>tr! <Plug>TranslateR!
vmap <silent> <Leader>tr! <Plug>TranslateRV!
" Translate the text in clipboard
nmap <silent> <Leader>tx! <Plug>TranslateX!

""""""""""""""""""""""""""""""""""""""""""""""""
" rainbow_active"
""""""""""""""""""""""""""""""""""""""""""""""""
let g:rainbow_active = 1 "set to 0 if you want to enable it later via :RainbowToggle
au FileType cmake RainbowToggleOff "bug syntax higlighting



""""""""""""""""""""""""""""""""""""""""""""""""
" coc-bookmark"" to use when debugged
""""""""""""""""""""""""""""""""""""""""""""""""
nmap <Leader>bl <Plug>(coc-bookmark-next)
nmap <Leader>bh <Plug>(coc-bookmark-prev)
nmap <leader>bt <plug>(coc-bookmark-toggle)
nmap <leader>ba <plug>(coc-bookmark-annotate)
nmap <leader>bz :CocList -A --tab bookmark<cr>

"""""""""""""""""""""""""""""""""""""""""""""""
" vim-bookmark"
"""""""""""""""""""""""""""""""""""""""""""""""
"nmap <Leader>bi <Plug>BookmarkAnnotate
"nmap <Leader>ba <Plug>BookmarkShowAll
"nmap <Leader>bj <Plug>BookmarkNext
"nmap <Leader>bk <Plug>BookmarkPrev
"nmap <Leader>bc <Plug>BookmarkClear
"nmap <Leader>bx <Plug>BookmarkClearAll
"nmap <Leader>bkk <Plug>BookmarkMoveUp
"nmap <Leader>bjj <Plug>BookmarkMoveDown
"nmap <Leader>bg <Plug>BookmarkMoveToLine
"nmap <Leader>bt <Plug>BookmarkToggle

"""""""""""""""""""""""""""""""""""""""""""""""
" coc-list" replace fzf
"""""""""""""""""""""""""""""""""""""""""""""""
nmap <leader>fb :CocList  buffers<cr>
nmap <leader>fg :CocList  gfiles<cr>
nmap <C-:> :CocList cmdhistory<cr>

"""""""""""""""""""""""""""""""""""""""""""""""
" grammarous"
"""""""""""""""""""""""""""""""""""""""""""""""
nmap <silent> <leader>ze :GrammarousCheck --lang=en --no-move-to-first-error<cr>
nmap <silent> <leader>zz :GrammarousCheck --lang=fr --no-move-to-first-error<cr>
nmap <silent> <leader>zr :GrammarousReset<cr>
nmap <silent> <leader>zi<Plug>(grammarous-move-to-info-window)  Move the cursor to the info window
nmap <silent> <leader>zo<Plug>(grammarous-open-info-window) Open the info window for the error under the cursor
nmap <silent> <leader>zr <Plug>(grammarous-reset) Reset the current check
nmap <silent> <leader>zf <Plug>(grammarous-fixit) Fix the error under the cursor automatically
nmap <silent> <leader>za <Plug>(grammarous-fixall)  Fix all the errors in a current buffer automatically
nmap <silent> <leader>zc <Plug>(grammarous-close-info-window) Close the information window from checked buffer
nmap <silent> <leader>zqq <Plug>(grammarous-remove-error) Remove the error under the cursor
nmap <silent> <leader>zdd <Plug>(grammarous-disable-rule) Disable the grammar rule under the cursor
nmap <silent> <leader>zl <Plug>(grammarous-move-to-next-error)  Move cursor to the next error
nmap <silent> <leader>zh <Plug>(grammarous-move-to-previous-error)
" autocorrect text on insert leave
augroup gram
  "au CursorHoldI * stopinsert"
  " set 'updatetime' to 15 seconds when in insert mode
  "au InsertEnter * let updaterestore=&updatetime | set updatetime=15000
  "au InsertLeave *  :GrammarousCheck --lang=fr --no-move-to-first-error<cr>
augroup END
nmap <silent> <leader>zt gram
"autocmd Foo


"let g:grammarous#use_vim_spelllang=1
"
"
"g:languagetool_port=8082
"let g:languagetool_server_command="java -cp ~/scoop/apps/languagetool/current/languagetool-server.jar org.languagetool.server.HTTPServer --port 8082"

"let g:languagetool = {
"'.' : {
"{model1} for all filetypes
"}
"}

"{model1} = {
""'enabledRules' : list of enabled rules,
""'disabledRules' : list of disabled rules,
""'enabledCategories' : list of enabled categories,
""'disabledCategories' : list of disabled categories,
"'language' : ['fr']
"}
"
"
""""""""""""""""""""""""""""""""""
"GINA
"""""""""""""""""""""""""""""""""""
nnoremap <leader>pc :Gina commit --opener="to split" --group="test"<cr>
nnoremap <leader>pe :Gcommit %<cr>
nnoremap <leader>ps :Gina status --opener="to split" --group="test"<cr>
nnoremap <leader>pb :Gina branch --opener=vsplit --group="test"<cr>
nnoremap <leader>pg :Gina grep --opener=tabnew --group="test" -ie
nnoremap <leader>pt :Gina tag --opener=vsplit  --group="test"<cr>

"""""""""""""""""""""""""""""""""""""
"coc-clang
""""""""""""""""""""""""""""""""""""
nnoremap <silent> <leader>a :CocCommand clangd.switchSourceHeader<cr>

"if (g:GuiLoaded==1)
"au VimEnter * GuiPopupmenu 0
":GuiPopupmenu 0
"au BufEnter *  :GuiPopupmenu 0
"endif
"call s:GuiPopupmenu(0)
"au VimEnter * :GuiPopupmenu 0 "disable nvim-qt popup menu who bug
"
"au UIEnter *  :GuiPopupmenu 0 "disable nvim-qt popup menu who bug
"
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" function for fold preprocessor directive in c/c++
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! Foldpreprocessor()
  set foldtext=myfoldtext()
  set foldmarker=#if,#endif
  set foldmethod=marker
endfunction
function! UnFoldpreprocessor()
  set foldmethod=syntax
endfunction
" This function customises what is displayed on the folded line:
function! MyFoldText()
  let line = getline(v:foldstart)
  let linecount = v:foldend + 1 - v:foldstart
  let plural = ""
  if linecount != 1
    let plural = "s"
  endif
  let foldtext = printf(" +%s %d line%s: %s", v:folddashes, linecount, plural, line)
  return foldtext
endfunction
com! Foldpreprocessor silent! call Foldpreprocessor()<cr>
com! UnFoldpreprocessor silent! call UnFoldpreprocessor()<cr>
" This is the line that works the magic
"
"""""""""""""""""""""""""""""""""""""
"  vim-indent-guides'
"""""""""""""""""""""""""""""""""""""
let g:indent_guides_enable_on_vim_startup = 1
"let g:indent_guides_guide_size = 1

"""""""""""""""""""""""""""""""""""""
" auto-pair
""""""""""""""""""""""""""""""""""""
"<CR> : Insert new indented line after return if cursor in blank brackets
"or quotes.
"<BS> : Delete brackets in pair
"<M-p>: Toggle Autopairs (|g:AutoPairsShortcutToggle|)
"<M-e>: Fast Wrap (|g:AutoPairsShortcutFastWrap|)
"<M-n>: Jump to next closed pair (|g:AutoPairsShortcutJump|)
"<M-b>: BackInsert (|g:AutoPairsShortcutBackInsert|)
"let g:AutoPairsShortcutToggle = '<leader>$t'
"let g:AutoPairsShortcutFastWrap= '<leader>$w'
"let g:AutoPairsShortcutShortcutJump= '<leader>$j'
"let g:AutoPairsShortcutBackInsert= '<leader>$b'
"let g:AutoPairsShortcutFastWrap='<leader>$'
"
"let g:AutoPairsFlyMode = 1
"""""""""""""""""""""
" compile quickli a main cpp code
"""""""""""""""""""""
function ExecuteCpp()
  :!g++ -o  %:r.outexe % -std=c++17
  :!%:r.outexe
endfunction
com! ExecuteCpp call ExecuteCpp()



function! GetBufferList()
  return filter(range(1,bufnr('$')), 'buflisted(v:val)')
endfunction

function! GetMatchingBuffers(pattern)
  return filter(GetBufferList(), 'bufname(v:val) =~ a:pattern')
endfunction

function! WipeMatchingBuffers(pattern)
  let l:matchList = GetMatchingBuffers(a:pattern)

  let l:count = len(l:matchList)
  if l:count < 1
    echo 'No buffers found matching pattern ' . a:pattern
    return
  endif

  if l:count == 1
    let l:suffix = ''
  else
    let l:suffix = 's'
  endif

  exec 'bw ' . join(l:matchList, ' ')

  echo 'Wiped ' . l:count . ' buffer' . l:suffix . '.'
endfunction

command! -nargs=1 WMB call WipeMatchingBuffers('<args>')
if has('nvim')

  let g:python3_host_prog = "D:/ftarroux/Logiciel/Python38-32/python.exe"
else
  "set pythondll=D:\ftarroux\Logiciel\Python2\python27.dll
  set pythonthreedll="D:/ftarroux/Logiciel/Python38-32/python38.dll"

endif



"let g:vimspector_enable_mappings = 'HUMAN'
"packadd! vimspector
"
"
"""""""""""""""""""""""
"float-preview.nvim'
"""""""""""""""""
if has('nvim')
  "let g:float_preview#docked = 0
endif



"""""""""""
" surround with "
"""""""""""
noremap <leader>" ciw""<Esc>P

"noremap : :<C-f>
"
noremap <leader>$ :colorscheme  solarized8<cr>

"au CursorHold * :e
